#!/usr/bin/env python3

# zxngdefmt



__version__ = "0.1"



import re
import sys



# --- constants ---



# <?>_RE = string
#
# Regular expressions to match various bits of NextGuide markup.


# link to another node
LINK_RE = r'@{ *"(?P<text>[^"]+)" LINK [^ }]+ *}'

# formatting attribute
ATTR_RE = r"@{\w+}"

# literal characters
LITERALTOKEN_RE = "@(?P<char>[^{])"

# plain (unformatted) word (as opposed to markup)
WORD_RE = "[^@ ]+"

# one or more spaces
SPACE_RE = " +"

# match any type of markup token or word or block of spaces
TOKEN_RE = (r"(?P<token>"
            + LINK_RE
            + r'|' + ATTR_RE
            + r'|' + LITERALTOKEN_RE
            + r'|' + WORD_RE
            + r'|' + SPACE_RE
            + r')'
            + r"(?P<remainder>.*)")


# LITERALLINE_RE = string
#
# Regular expression to match lines which must be included in the output
# guide literally (i.e. without reformatting).  Includes:

LITERALLINE_RE = (r'('

                  # lines with leading spaces
                  + r"\s+"

                  # lines with 3 or more consecutive spaces
                  + r"|.+\s{3,}"

                  # lines beginning with '@' but not '@@' or '@{' -
                  # these indicate node names, lines to adjacent pages
                  # or TOC/index pages
                  + r"|@[^{@]"

                  # lines with centred or right-justified text
                  + r"|@{[cr]}"

                  # lines with headers
                  + r"|.*@{h\d}"

                  # lines consisting solely of a single link
                  + r'|' + LINK_RE + r'$'

                  + r')')



# maximum length for a single line in the output guide

LINE_MAXLEN = 80



# --- functions ---



def render_token(t):
    """Render a NextGuide token (which could be markup, or a literal
    word, or block of spaces) into the text that would be displayed on
    screen (ignoring formatting).  This is used to work out the length
    of rendered markup and calculate displayed line lengths; it is not
    used to generate output.
    """

    # if the token is a link, use the displayed text field
    m = re.match(LINK_RE, t)
    if m:
        return m["text"]

    # if the token is a literal character, convert that to the displayed
    # character
    m = re.match(LITERALTOKEN_RE, t)
    if m:
        c = m["char"]

        # '@(' is the copyright sign
        if c == "(":
            return "\N{COPYRIGHT SIGN}"

        else:
            return c

    # attribute formatting codes don't render to anything displayed
    m = re.match(ATTR_RE, t)
    if m:
        return ""

    # we have a literal word or block of spaces - just use that directly
    return t


class GuideLine(object):
    def __init__(self):
        super().__init__()

        self.line_markup = ""
        self.line_render = ""

        self.word_markup = ""
        self.word_render = ""

        self.space = ""


    def writeline(self):
        """If there is anything in it, write the current line buffer out and
        clear it, ready for the next line.
        """

        if self.line_markup:
            l = self.line_markup

            self.line_markup = ""
            self.line_render = ""
            self.space = ""

            return l

        return None


    def completeword(self, *, space=""):
        """Complete the current word.  If the rendered word would fit on the
        current line, it is just appended.  If, however, it would flow out
        of the right margin, the current line will be completed and a new
        line begun with the current word.

        Returns a completed line, if one was, or None.
        """

        # if no word or line, return None as we didn't actually complete a word
        if (not self.line_render) and (not self.word_render):
            return None

        l = None
        if len(self.line_render + self.space + self.word_render) > LINE_MAXLEN:
            l = self.writeline()
            # don't add the space, as we're beginning a new line

        else:
            # add the space, as we're continuing the line
            self.line_markup += self.space
            self.line_render += self.space

        self.line_markup += self.word_markup
        self.line_render += self.word_render

        # start a new word with no space
        self.word_markup = ""
        self.word_render = ""
        self.space = space

        # we completed a word so return True
        return l


    def appendtoken(self, t):
        """Append the supplied token to the current word.
        """

        self.word_markup += t
        self.word_render += render_token(t)



class GuideDoc(object):
    """Class representing an entire NextGuide document.
    """

    def __init__(self):
        super().__init__()

        self.lines = []
        self.current_line = GuideLine()


    def print(self):
        """Print the lines in the current document.
        """

        for l in self.lines:
            print(l)


    def add_literal_line(self, l):
        """Add a literal line.
        """

        p = self.current_line.writeline()
        if p:
            self.lines.append(p)

        self.lines.append(l)


    def append_token(self, t):
        self.current_line.appendtoken(t)

    def complete_word(self, *, space=""):
        p = self.current_line.completeword(space=space)
        if p:
            self.lines.append(p)

    def complete_doc(self):
        p = self.current_line.writeline()
        if p:
            self.lines.append(p)


doc = GuideDoc()

with sys.stdin as f:
    for l in f:
        # remove any trailing whitespace
        l = l.rstrip()

        # if the line is blank or is one that is used literally, just
        # add that to the document
        if (l == '') or re.match(LITERALLINE_RE, l):
            doc.add_literal_line(l)
            continue

        # go through the line matching tokens (markup, literal or spaces)
        while l:
            m = re.match(TOKEN_RE, l)

            if not m:
                raise AssertionError("something has gone wrong matching"
                                     " '{l}'")

            token, l = m.group("token", "remainder")
            #print(f"TOKEN >>> <{token}>")
            #print(f"REMAINDER >>> <{l}>")

            # this token is a space, complete the current word
            if re.match(SPACE_RE, token):
                doc.complete_word(space=token)

            else:
                doc.append_token(token)

        # end of line completes a word and adds a space
        p = doc.complete_word(space=" ")

# if there is something in the buffer
doc.complete_doc()

doc.print()
