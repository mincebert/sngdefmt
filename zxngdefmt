#!/usr/bin/env python3

# zxngdefmt



__version__ = "0.1"



import re
import sys



# --- constants ---



# <?>_RE = string
#
# Regular expressions to match various bits of NextGuide markup.


# link to another node
LINK_RE = r'@{ *"(?P<text>[^"]+)" LINK [^ }]+ *}'

# formatting attribute
ATTR_RE = r"@{\w+}"

# literal characters
LITERALTOKEN_RE = "@(?P<char>[^{])"

# plain (unformatted) word (as opposed to markup)
WORD_RE = "[^@ ]+"

# one or more spaces
SPACE_RE = " +"

# match any type of markup token or word or block of spaces
TOKEN_RE = (r"(?P<token>"
            + LINK_RE
            + r'|' + ATTR_RE
            + r'|' + LITERALTOKEN_RE
            + r'|' + WORD_RE
            + r'|' + SPACE_RE
            + r')'
            + r"(?P<remainder>.*)")

# matching document-level tokens
DOC_RE = r"@(title|author|version|copyright|date) .+"

# matching a linked node token (for constructing node links)
NODE_RE = r"@(?P<link>(node|prev|next|toc|index)) (?P<node>\S+)"

# lines to ignore
IGNORE_RE = r"@-+"


# LITERALLINE_RE = string
#
# Regular expression to match lines which must be included in the output
# guide literally (i.e. without reformatting).  Includes:

LITERALLINE_RE = (r'('

                  # lines with leading spaces
                  + r"\s+"

                  # lines with 3 or more consecutive spaces
                  + r"|.+\s{3,}"

                  # lines beginning with '@' but not '@@' or '@{' -
                  # these indicate node names, lines to adjacent pages
                  # or TOC/index pages
                  + r"|@[^{@]"

                  # lines with centred or right-justified text
                  + r"|@{[cr]}"

                  # lines with headers
                  + r"|.*@{h\d}"

                  # lines consisting solely of a single link
                  + r'|' + LINK_RE + r'$'

                  + r')')



# maximum length for a single line in the output guide

LINE_MAXLEN = 80



# --- functions ---



def render_token(t):
    """Render a NextGuide token (which could be markup, or a literal
    word, or block of spaces) into the text that would be displayed on
    screen (ignoring formatting).  This is used to work out the length
    of rendered markup and calculate displayed line lengths; it is not
    used to generate output.
    """

    # if the token is a link, use the displayed text field
    m = re.match(LINK_RE, t)
    if m:
        return m["text"]

    # if the token is a literal character, convert that to the displayed
    # character
    m = re.match(LITERALTOKEN_RE, t)
    if m:
        c = m["char"]

        # '@(' is the copyright sign
        if c == "(":
            return "\N{COPYRIGHT SIGN}"

        else:
            return c

    # attribute formatting codes don't render to anything displayed
    m = re.match(ATTR_RE, t)
    if m:
        return ""

    # we have a literal word or block of spaces - just use that directly
    return t


class GuideLine(object):
    def __init__(self):
        super().__init__()

        self.line_markup = ""
        self.line_render = ""

        self.word_markup = ""
        self.word_render = ""

        self.space = ""


    def writeline(self):
        """If there is anything in it, write the current line buffer out and
        clear it, ready for the next line.
        """

        if self.line_markup:
            l = self.line_markup

            self.line_markup = ""
            self.line_render = ""
            self.space = ""

            return l

        return None


    def completeword(self, *, space=""):
        """Complete the current word.  If the rendered word would fit on the
        current line, it is just appended.  If, however, it would flow out
        of the right margin, the current line will be completed and a new
        line begun with the current word.

        Returns a completed line, if one was, or None.
        """

        # if no word or line, return None as we didn't actually complete a word
        if (not self.line_render) and (not self.word_render):
            return None

        l = None
        if len(self.line_render + self.space + self.word_render) > LINE_MAXLEN:
            l = self.writeline()
            # don't add the space, as we're beginning a new line

        else:
            # add the space, as we're continuing the line
            self.line_markup += self.space
            self.line_render += self.space

        self.line_markup += self.word_markup
        self.line_render += self.word_render

        # start a new word with no space
        self.word_markup = ""
        self.word_render = ""
        self.space = space

        # we completed a word so return True
        return l


    def appendtoken(self, t):
        """Append the supplied token to the current word.
        """

        self.word_markup += t
        self.word_render += render_token(t)



class GuideNode(object):
    def __init__(self, name):
        super().__init__()

        self.name = name
        self.links = {}

        self.lines = []

    def setlink(self, link, node):
        """Unconditionally set the link to another node.
        """
        if not node:
            del self.links[link]
        else:
            self.links[link] = node

    def setdefaultlink(self, link, node):
        """Set the link to another node only if this link is not yet defined.
        """
        if node:
            self.links.setdefault(link, node)

    def getname(self):
        """Return the node name.
        """
        return self.name

    def getlink(self, link):
        """Return the link from this node, or None if not defined.
        """
        return self.links.get(link)

    def appendline(self, l):
        self.lines.append(l)

    def print(self):
        """Print the current node.
        """
        p = ["@node " + self.name]
        for link in ["prev", "next", "toc", "index"]:
            if link in self.links:
                p.append(f"@{link} {self.links[link]}")
        for l in self.lines:
            p.append(l)
        return '\n'.join(p)


class GuideDoc(object):
    """Class representing an entire NextGuide document.
    """

    def __init__(self):
        super().__init__()

        # document-level lines (appear before all nodes)
        self.doc_lines = []

        # list of GuideNodes() making up the doc
        self.nodes = []

        # the current node (created when '@node ...' is parsed)
        self.current_node = None

        # current line
        self.current_line = GuideLine()


    def parse(self, f):
        """Parse file into document.
        """

        for l in f:
            # remove any trailing whitespace
            l = l.rstrip()

            #print("LINE -- <", l)

            # skip any lines to ignore
            if re.match(IGNORE_RE, l):
                continue

            if re.match(DOC_RE, l):
                if self.current_node:
                    raise AssertionError("document-level token in node")
                self.doc_lines.append(l)
                continue

            # try and match a node/link token
            m = re.match(NODE_RE, l)
            if m:
                link, node = m.group("link", "node")

                # is this a new node?
                if link == 'node':
                    # finish the current line and append it
                    p = self.current_line.writeline()
                    if p:
                        self.current_node.appendline(p)

                    # append the current node, if there is one
                    if self.current_node:
                        self.nodes.append(self.current_node)

                    # start a new node
                    self.current_node = GuideNode(node)

                else:
                    # set the link for the node we're constructing
                    self.current_node.setlink(link, node)

                continue

            # if the line is blank or is one that is used literally,
            # just add that to the document
            if (l == '') or re.match(LITERALLINE_RE, l):
                # finish the current line and append it
                p = self.current_line.writeline()
                if p:
                    self.current_node.appendline(p)

                # add the literal line
                self.current_node.appendline(l)

                continue

            # go through the line matching tokens (markup, literal or spaces)
            while l:
                m = re.match(TOKEN_RE, l)

                if not m:
                    raise AssertionError("something has gone wrong matching"
                                        " '{l}'")

                token, l = m.group("token", "remainder")
                #print(f"TOKEN >>> <{token}>")
                #print(f"REMAINDER >>> <{l}>")

                # this token is a space, complete the current word
                if re.match(SPACE_RE, token):
                    p = self.current_line.completeword(space=token)
                    if p:
                        self.current_node.appendline(p)

                else:
                    self.current_line.appendtoken(token)

            # end of line completes a word and adds a space
            p = self.current_line.completeword(space=" ")
            if p:
                self.current_node.appendline(p)

        # if there is something in the buffer
        self.complete_doc()


    def print(self):
        """Print the lines in the current document.
        """

        for l in self.doc_lines:
            print(l)

        for n in self.nodes:
            print('@' + ('-' * (LINE_MAXLEN - 1)))
            print(n.print())


    def complete_doc(self):
        """Finish the entire document.  This will render out of any
        pending data in the line buffer.
        """

        # fill in missing previous node, toc and index nodes
        #
        # prev = whatever the previous node was
        #
        # toc = the most recently defined toc
        #
        # index = the most recently defined index
        prev_node = None
        toc_node = None
        index_node = None
        for node in self.nodes:
            # set missing links for this node
            node.setdefaultlink("prev", prev_node)
            node.setdefaultlink("toc", toc_node)
            node.setdefaultlink("index", index_node)
            
            # store the information about this node to use for
            # subsequent ones, if defined
            prev_node = node.getname()
            toc_node = node.getlink("toc")
            index_node = node.getlink("index")

        next_node = None
        for node in reversed(self.nodes):
            node.setdefaultlink("next", next_node)
            next_node = node.getname()

        p = self.current_line.writeline()
        if p:
            self.current_node.appendline(p)


doc = GuideDoc()

with sys.stdin as f:
    doc.parse(f)

doc.print()
